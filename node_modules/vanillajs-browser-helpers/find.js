"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var isString_1 = __importDefault(require("vanillajs-helpers/isString"));
var findByClass_1 = __importDefault(require("./findByClass"));
var findById_1 = __importDefault(require("./findById"));
var findByTagName_1 = __importDefault(require("./findByTagName"));
var findByQuery_1 = __importDefault(require("./findByQuery"));
function find(elm, selector) {
    var _a;
    if ((0, isString_1.default)(elm)) {
        _a = __read([document, elm], 2), elm = _a[0], selector = _a[1];
    }
    var query = selector;
    var isComplex = [' ', '>', '+', '*', '~', ':', '[', ',']
        .some(function (char) { return query.indexOf(char) > -1; });
    if (!isComplex) {
        var firstChar = query[0];
        var rest = query.substring(1);
        var isId = firstChar === '#';
        var isClass = firstChar === '.';
        var hasClass = rest.indexOf('.') > -1;
        var hasId = rest.indexOf('#') > -1;
        if (isId && !hasClass) {
            return (0, findById_1.default)(rest);
        }
        if (isClass && !hasId) {
            return (0, findByClass_1.default)(elm, rest.replace(/\./g, ' '));
        }
        if (!isClass && !isId && !(hasId || hasClass)) {
            return (0, findByTagName_1.default)(elm, selector);
        }
    }
    return (0, findByQuery_1.default)(elm, query);
}
exports.default = find;
