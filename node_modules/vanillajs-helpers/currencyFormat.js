"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.currencyFormat = void 0;
var formatNumber_1 = __importDefault(require("./formatNumber"));
var thousandRegExp = /^(\D*)1(\D*)000(\D*)(\d*)(\D*)$/;
/**
 * Creates a function that formats a number to a given currency format (eg. 1000 -> 1.000,00 €)
 *
 * The template string should be the number 1000 described with before and after
 * symbols (no numbers), a thousand separator and a decimal separator followed by
 * the number of decimals defined with zeroes: `[before]1[thou.]000[dec.]00[after] -> $ 1,000.00`
 *
 * @example
 * ```ts
 * // Format number to default currency format (euro)
 * const euro = currencyFormat();
 * euro(2345234.678); // -> '2.345.234,68 €'
 *
 * // Format number to USD currency format
 * const usd = currencyFormat('$ 1,000.00');
 * usd(2345234.678); // -> '$ 2,345,234.68'
 *
 * // Format number to custom currency format
 * const custom = currencyFormat('# 1-000;00 ¤');
 * custom(2345234.678); // -> '# 2-345-234;68 ¤'
 *
 * // Specifying number of decimals
 * const sixDecimals = currencyFormat('$ 1,000.000000');
 * sixDecimals(2345234.678); // -> '$ 2,345,234.678000'
 * sixDecimals(234.12345678); // -> '$ 234.123457'
 * ```
 *
 * @param thousand - The template for how to format a number, takes an example of 1000 in the desired curreny (eg. '1.000,00 €')
 * @return - Curried function to format a given number
 */
function currencyFormat(thousandString) {
    if (thousandString === void 0) { thousandString = '1.000,00 €'; }
    var m = thousandRegExp.exec(thousandString);
    if (!m) {
        m = thousandRegExp.exec('1.000,00 €');
    }
    var _a = __read(m.slice(1), 5), before = _a[0], thousand = _a[1], decimal = _a[2], dec = _a[3], after = _a[4];
    var settings = { decimals: dec.length, thousand: thousand, decimal: decimal };
    return function (num) { return "".concat(before).concat((0, formatNumber_1.default)(num, settings)).concat(after); };
}
exports.currencyFormat = currencyFormat;
exports.default = currencyFormat();
