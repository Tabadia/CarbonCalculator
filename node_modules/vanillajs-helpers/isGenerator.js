"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.isGenerator = void 0;
var isFunction_1 = __importDefault(require("./isFunction"));
/**
 * Determine if the given argument is a Generator object.
 * (A generator is the one created when calling a generator function)
 *
 * @example
 * ```ts
 * function *gen() {}
 *
 * isGenerator(gen()); // -> true
 * isGenerator({ next() {}, throw() {} return() {} [Symbol.iterator]() {} }); // -> true
 * isGenerator(() => {}); // -> false
 * ```
 *
 * @param x - Argument to test
 * @return - Whether the argument a Generator like function or not
 */
// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types, @typescript-eslint/no-explicit-any
function isGenerator(x) {
    return x != null
        && (0, isFunction_1.default)(x.next)
        && (0, isFunction_1.default)(x.throw)
        && (0, isFunction_1.default)(x.return);
    // && isFunction(x[Symbol.iterator]);
}
exports.isGenerator = isGenerator;
/**
 * Determine if the given argument is a Generator Function
 *
 * @example
 * ```ts
 * function* gen() {}
 *
 * isGeneratorFunction(gen); // -> true
 * isGeneratorFunction(() => {}); // -> false
 * ```
 *
 * @param x - Argument to test
 * @return - Whether the argument a Generator or not
 */
// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types, @typescript-eslint/no-explicit-any
function isGeneratorFunction(x) {
    if (!x || !x.constructor) {
        return false;
    }
    var _a = x.constructor, name = _a.name, displayName = _a.displayName, prototype = _a.prototype;
    return name === 'GeneratorFunction'
        || displayName === 'GeneratorFunction'
        || isGenerator(prototype);
}
exports.default = isGeneratorFunction;
